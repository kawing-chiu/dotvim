global !p
from ultisnips_helpers import *
endglobal

priority 1

snippet shebang "shebang" b
#!/usr/bin/env python
endsnippet

snippet [ "[...]" i
[$1]
endsnippet

snippet ( "(...)" i
($1)
endsnippet

snippet < "<...>" i
<$1>
endsnippet

snippet " "double quote" i
"$1"
endsnippet

snippet ' "single quote" i
'$1'
endsnippet


## import and export

snippet i "import" b
import $0
endsnippet

snippet f "from" b
from $0
endsnippet

snippet in "import numpy" b
import numpy as np
endsnippet

snippet inp "import numpy, pandas" b
import numpy as np
import pandas as pd
endsnippet

snippet inm "import numpy, matplotlib" b
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
endsnippet

snippet inpm "import numpy, pandas, matplotlib" b
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
endsnippet

snippet fsql "from sqlalchemy import ..." b
from sqlalchemy import $0
endsnippet

snippet fsqlengine "from sqlalchemy import create_engine" b
from sqlalchemy import create_engine, text
endsnippet

snippet fsqlmeta "from sqlalchemy import MetaData" b
from sqlalchemy import MetaData, Table
endsnippet


## convenient debug structures

snippet glb "globals()[...] = ..." b
globals()['$1'] = $1
endsnippet

snippet exit "sys.exit()" b
import sys; sys.exit()
endsnippet

snippet p "print()" b
print($1)
endsnippet

snippet pr "print('...:', ...)" b
print("$1:", $1)
endsnippet

snippet pdb "pdb.set_trace()" b
import pdb; pdb.set_trace()
endsnippet

snippet ipdb "ipdb.set_trace()" b
import ipdb; ipdb.set_trace()
endsnippet


## language structures

snippet s. "self." w
self.$0
endsnippet

snippet s_ "self._" w
self._$0
endsnippet

snippet s.. "self.xxx = xxx" w
self.$1 = $1
endsnippet

snippet s__ "self._xxx = xxx" w
self._$1 = $1
endsnippet

snippet ifm "if main" bw
def main():
	${0:pass}

if __name__ == '__main__':
	main()
endsnippet

snippet ifma "if main with arg parsing" bw
def _parse_args():
	from argparse import ArgumentParser
	parser = ArgumentParser(description="$1")$2
	args = parser.parse_args()
	return args

def main():
	args = _parse_args()$0

if __name__ == '__main__':
	main()
endsnippet

snippet doc "docstring" w
"""$1`!p
indent = get_indent(snip, shift=0)
prefix = '\n\n' + indent
add_str_if(snip, t[2], prefix)
`$2`!p
if not t[2]:
    suffix = '"""' 
else:
    suffix = '\n' + indent + '"""'
add_str(snip, suffix)
refresh(snip)
`
endsnippet

snippet def "function definition" b
def $1($2):
	${0:pass}
endsnippet

snippet defs "instance method" b
def $1(self`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet defc "class method" b
def $1(cls`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet defm "metaclass method" b
def $1(meta`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet cls "class definition" b
class $1`!p
add_str_if(snip, t[2], "(")
`$2`!p
add_str_if(snip, t[2], ")")
`:
	${0:pass}
endsnippet

snippet cls2 "class definition py2 version" b
class $1(${2:object}):
	${0:pass}
endsnippet

snippet super "super() function" b
super($1, self).$2($3)
endsnippet

priority 2
snippet "\*{2}" "**kwargs" ir
**kwargs
endsnippet
priority 1

snippet "\*{1}" "*args" ir
*args
endsnippet


## __xxx__

snippet __all "__all__" b
__all__ = [$1]
endsnippet

snippet __author "author declaration" w
__author__ = ("${1:Zhao Jiarong} ${2:<kawing.chiu.sysu@gmail.com>}")
endsnippet

snippet __init "__init__ method" b
def __init__(self`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet __new "__new__ method" b
def __new__(cls`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet __del "__del__ method" b
def __del__(self):
	${0:pass}
endsnippet

snippet __call "__call__ method" b
def __call__(self`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet __repr "__repr__ method" b
def __repr__(self):
	${0:pass}
endsnippet

snippet __str "__str__ method" b
def __str__(self):
	${0:pass}
endsnippet

snippet __len "__len__ method" b
def __len__(self):
	${0:pass}
endsnippet

snippet __iter "__iter__ method" b
def __iter__(self):
	${0:pass}
endsnippet

snippet __next "__next__ method" b
def __next__(self):
	${0:pass}
endsnippet

snippet __getattr "__getattr__ method" b
def __getattr__(self, name):
	${0:pass}
endsnippet

snippet __setattr "__setattr__ method" b
def __setattr__(self, name, value):
	${0:pass}
endsnippet

snippet __delattr "__delattr__ method" b
def __delattr__(self, name):
	${0:pass}
endsnippet

snippet __getitem "__getitem__ method" b
def __getitem__(self, key):
	${0:pass}
endsnippet

snippet __setitem "__setitem__ method" b
def __setitem__(self, key, value):
	${0:pass}
endsnippet

snippet __delitem "__delitem__ method" b
def __delitem__(self, key):
	${0:pass}
endsnippet

# descriptor methods
snippet __get "__get__ method" b
def __get__(self, instance, owner):
	${0:pass}
endsnippet

snippet __set "__set__ method" b
def __set__(self, instance, value):
	${0:pass}
endsnippet

snippet __delete "__delete__ method" b
def __delete__(self, instance):
	${0:pass}
endsnippet


## new file

snippet py3 "python 3 file template" b
#!/usr/bin/env python3
"""$1
"""
$2


$0

endsnippet

snippet py "python file template" b
#!/usr/bin/env python
"""$1
"""
$2


$0

endsnippet

snippet py2 "python 2 file template" b
#!/usr/bin/env python2
# encoding: utf-8
"""$1
"""
from __future__ import print_function, division, unicode_literals
from io import open
$2


$0

endsnippet

snippet py2-encoding "python 2 encoding" b
# encoding: utf-8
endsnippet

snippet py2-future "python 2 __future__ import" b
from __future__ import print_function, division, unicode_literals
endsnippet

snippet py2-io "python 2 io import" b
from io import open
endsnippet


## miscellaneous

snippet fixture "pytest fixture decorator" b
@pytest.fixture($1)
endsnippet

snippet add_argument "add argument to parser" b
parser.add_argument($1)
endsnippet

snippet license-agpl "AGPL license statement" b
# Copyright (C) `!p
import datetime
snip.rv += str(datetime.date.today().year)
` Zhao Jiarong <kawing.chiu.sysu at gmail dot com>
#
# This file is part of $1.
# 
# $1 is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# 
# $1 is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with $1. If not, see <http://www.gnu.org/licenses/>.
endsnippet


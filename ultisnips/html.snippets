global !p
from ultisnips_helpers import *
endglobal

snippet bt "basic html template" bw
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>${1:Test Project}</title>
		<link rel="stylesheet" type="text/css" href="/static/vendor.css">
		<link rel="stylesheet" type="text/css" href="/static/app.css">
	</head>
	<body>$0
		<script src="/static/vendor.js"></script>
		<script src="/static/app.js"></script>
	</body>
</html>
endsnippet

snippet bt-bootstrap "basic html template for bootstrap" bw
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>${1:Test Project}</title>
		<link rel="stylesheet" type="text/css" href="css/bootstrap.css">
		<link rel="stylesheet" type="text/css" href="css/styles.css">
	</head>
	<body>
		$0

		<script src="js/jquery.js"></script>
		<script src="js/bootstrap.js"></script>
	</body>
</html>
endsnippet

snippet t "generic single html tag" w
<$1`!p
add_str_if(snip, t[2], ' ')
`$2 />
endsnippet

snippet tt "generic html tag" w
<$1`!p
add_str_if(snip, t[2], ' ')
`$2>$3</$1>
endsnippet

snippet tm "generic html tag multiline" w
<$1`!p
add_str_if(snip, t[2], ' ')
`$2>$3
</$1>
endsnippet

snippet div "html div tag" w
<div`!p
add_str_if(snip, t[1], ' ')
`$1>$2</div>
endsnippet

snippet divm "html div tag multiline" w
<div`!p
add_str_if(snip, t[1], ' ')
`$1>$2
</div>
endsnippet

#snippet divc "html div tag with class" w
#<div `!p
#if 'jsx' in snip.ft:
#	snip.rv = 'className'
#else:
#	snip.rv = 'class'
#`="$1"$2>$3
#</div>
#endsnippet

#snippet div' "html div tag" w
#<div class="$1"`!p
#add_str_if(snip, t[2], ' ')
#`$2>$3
#</div>
#endsnippet

snippet class "class=" w
class="$1"
endsnippet

snippet id "id=" w
id="$1"
endsnippet

snippet span "html span tag" w
<span$1>$2</span>
endsnippet

snippet spanc "html span tag with class" w
<span `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3</span>
endsnippet

snippet role "role=" w
role="$1"
endsnippet

snippet role-nav "role=navigation" w
role="navigation"
endsnippet

snippet role-form "role=form" w
role="form"
endsnippet

snippet a "html a tag" w
<a$1>$2</a>
endsnippet

snippet href "href=" w
href="${1:#}"
endsnippet

snippet ac "html a tag with class" w
<a `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3</a>
endsnippet

#snippet a' "html a tag" w
#<a href="$1"`!p
#add_str_if(snip, t[2], ' ')
#`$2>$3</a>
#endsnippet
#
#snippet ac' "html a tag with class" w
#<a class="$1" href="$2"`!p
#add_str_if(snip, t[3], ' ')
#`$3>$4</a>
#endsnippet

snippet button "html button tag" w
<button$1>$2</button>
endsnippet

snippet buttonc "html button tag with class" w
<button `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3</button>
endsnippet

snippet type "type=" w
type="$1"
endsnippet

snippet type-button "type=button" w
type="button"
endsnippet

snippet type-text "type=text" w
type="text"
endsnippet

snippet type-submit "type=submit" w
type="submit"
endsnippet

#snippet buttonct "html button tag with class and type" w
#<button `!p
#if 'jsx' in snip.ft:
#	snip.rv = 'className'
#else:
#	snip.rv = 'class'
#`="$1" type="${2:button}">$3</button>
#endsnippet


snippet "h(\d)" "html h tag" r
<`!p 
tag = "h" + match.group(1)
snip.rv = tag
`$1>$2</`!p snip.rv = tag`>
endsnippet

snippet "h(\d)c" "html h tag with class" r
<`!p 
tag = "h" + match.group(1)
snip.rv = tag
` `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3</`!p snip.rv = tag`>
endsnippet

#snippet "h(\d)'" "html h tag" r
#<`!p 
#tag = "h" + match.group(1)
#snip.rv = tag
#``!p
#add_str_if(snip, t[1], ' ')
#`$1>$2</`!p snip.rv = tag`>
#endsnippet

snippet form "html form tag" w
<form$1>$2
</form>
endsnippet

snippet formc "html form tag with class" w
<form `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3
</form>
endsnippet

snippet input "html input tag" w
<input$1 />
endsnippet

snippet placeholder "placeholder=" w
placeholder="$1"
endsnippet

snippet table "html table tag" w
<table$1>$2
</table>
endsnippet

snippet tablec "html table tag with class" w
<table `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3
</table>
endsnippet

snippet thead "html thead tag" w
<thead$1>$2
</thead>
endsnippet

snippet tbody "html tbody tag" w
<tbody$1>$2
</tbody>
endsnippet

snippet tr "html tr tag" w
<tr$1>$2
</tr>
endsnippet

snippet th "html th tag" w
<th$1>$2</th>
endsnippet

snippet td "html td tag" w
<td$1>$2</td>
endsnippet

snippet ul "html ul tag" w
<ul$1>$2
</ul>
endsnippet

snippet ulc "html ul tag with class" w
<ul `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3
</ul>
endsnippet

snippet li "html li tag" w
<li$1>$2</li>
endsnippet

snippet lic "html li tag with class" w
<li `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3</li>
endsnippet

snippet label "html label tag" w
<label$1>$2</label>
endsnippet

snippet labelc "html label tag with class" w
<label `!p
if 'jsx' in snip.ft:
	snip.rv = 'className'
else:
	snip.rv = 'class'
`="$1"$2>$3</label>
endsnippet

snippet for "for=" w
`!p
if 'jsx' in snip.ft:
	snip.rv = 'htmlFor'
else:
	snip.rv = 'for'
`="$1"
endsnippet

snippet p "html p tag" w
<p$1>$2</p>
endsnippet

snippet script "html script tag" w
<script$1>$2</script>
endsnippet

snippet src "src=" w
src="$1"
endsnippet

snippet type-json "type=application/json" w
type="application/json"
endsnippet

####################################

#snippet script "script tag" w
#<script src="$1"></script>
#endsnippet
#
#snippet script-json "script tag for json" w
#<script id="$1" type="application/json">$2
#</script>
#endsnippet
#
#snippet script-html "script tag for html" w
#<script id="$1" type="text/html">$2
#</script>
#endsnippet
#
#snippet script4 "script tag" w
#<script src="$1" type="text/javascript">
#endsnippet

#snippet lim' "html li tag" w
#<li`!p
#add_str_if(snip, t[1], ' ')
#`$1>$2
#</li>
#endsnippet

#snippet input "html input tag" w
#<input class="$1" type="$2" placeholder="$3" required="">
#endsnippet
#
#snippet input' "html input tag" w
#<input class="$1" type="$2" placeholder="$3" required=""`!p
#add_str_if(snip, t[4], ' ')
#`$4>
#endsnippet

#snippet t' "generic html tag" w
#<$1`!p
#add_str_if(snip, t[2], ' ')
#`$2>$3</$1>
#endsnippet

#snippet tc' "generic html tag with class" w
#<$1 class="$2"`!p
#add_str_if(snip, t[3], ' ')
#`$3>$4</$1>
#endsnippet
#
#snippet tm' "generic html tag multiline" w
#<$1`!p
#add_str_if(snip, t[2], ' ')
#`$2>$3
#</$1>
#endsnippet
#
#snippet tcm' "generic html tag with class" w
#<$1 class="$2"`!p
#add_str_if(snip, t[3], ' ')
#`$3>$4
#</$1>
#endsnippet
#
#snippet ts' "generic html tag no closing" w
#<$1`!p
#add_str_if(snip, t[2], ' ')
#refresh(snip)
#`$2>
#endsnippet


snippet b "html b tag" w
<b>$1</b>
endsnippet

snippet action "action=" w
action="$1"
endsnippet

snippet method "method=" w
method="${1:post}"
endsnippet


snippet autofocus "autofocus=" w
autofocus=""
endsnippet

snippet autocomplete "autocomplete=" w
autocomplete="${1:off}"
endsnippet


snippet strong "html strong tag" w
<strong>$1</strong>
endsnippet

snippet address "html address tag" w
<address>$1
</address>
endsnippet

snippet doctype "html doctype" w
<!DOCTYPE html>
endsnippet

snippet meta "meta tag" w
<meta ${1:charset="utf-8"}>
endsnippet

snippet metan "meta tag with name and content" w
<meta name="$1" content="$2">
endsnippet

snippet link "link tag" w
<link rel="${1:stylesheet}" href="$2">
endsnippet

snippet link4 "link tag" w
<link rel="${1:stylesheet}" href="$2" type="text/css">
endsnippet


snippet django-modeline "vim modeline" w
<!-- vim: set filetype=htmldjango: -->
endsnippet


####
# testing
#snippet test ""
#hi ${1:this ${2:second ${3}}}$4
#$1
#$2
#$3
#$4
#endsnippet
#snippet m ""
#[ $1 $2 ] $1
#endsnippet
#snippet m1 ""
#ASnip $1 ASnip $2 ASnip
#endsnippet
###









# vim: ts=4 filetype=snippets

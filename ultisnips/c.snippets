global !p
from ultisnips_helpers import *
endglobal

snippet main "C main function" w
int main() {
	${0:;}
}
endsnippet

snippet maina "C main function with arguments" w
int main(int argc, char **argv) {
	${0:;}
}
endsnippet

snippet def "function definition" b
$1($2)`!p
add_str_if(snip, t[3], " ")
`$3 {
	${0:;}
}
endsnippet

snippet for "for loop" b
for ($1; $2; $3) {
	$4
}
endsnippet

snippet if "if statement" b
if ($1) {
	$2
}
endsnippet

snippet typedef "typedef" b
typedef $0
endsnippet

snippet size_t "size_t" w
size_t $0
endsnippet

snippet inc "#include" b
#include <$1>
endsnippet

snippet /* "long comment" b
/*
 * $1
 */
endsnippet

snippet #ifndef "#ifndef" b
#ifndef $0
#endif
endsnippet

snippet #ifdef "#ifdef" b
#ifdef $0
#endif
endsnippet

snippet #elif "#elif" b
#elif $0
endsnippet

snippet #else "#else" b
#else$0
endsnippet

snippet #def "#define" b
#define $0
endsnippet

snippet incl "#include quotes version" b
#include "$1"
endsnippet

snippet header-guard "header guard" b
#ifndef `!p
import os
buffer_file = get_buffer_file()
buffer_file = os.path.basename(buffer_file).upper()
guard_name = '_' + buffer_file.replace('.', '_')
snip.rv = guard_name
`
#define `!p
snip.rv = guard_name
`

$0


#endif // End of `!p
snip.rv = guard_name
`
endsnippet

snippet stdio.h "#include <stdio.h>" b
#include <stdio.h>
endsnippet

snippet stdlib.h "#include <stdlib.h>" b
#include <stdlib.h>
endsnippet

snippet string.h "#include <string.h>" b
#include <string.h>
endsnippet

snippet assert.h "#include <assert.h>" b
#include <assert.h>
endsnippet

snippet dlfcn.h "#include <dlfcn.h>" b
#include <dlfcn.h>
endsnippet

snippet stdint.h "#include <stdint.h>" b
#include <stdint.h>
endsnippet

snippet printf "printf function" w
printf("$1"`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2);
endsnippet

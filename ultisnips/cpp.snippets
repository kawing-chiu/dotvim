extends c
priority 1

global !p
from ultisnips_helpers import *
endglobal

snippet iostream "#include <iostream>" b
#include <iostream>
endsnippet

snippet sstream "#include <sstream>" b
#include <sstream>
endsnippet

snippet fstream "#include <fstream>" b
#include <fstream>
endsnippet

snippet thread "#include <thread>" b
#include <thread>
endsnippet

snippet mutex "#include <mutex>" b
#include <mutex>
endsnippet

snippet memory "#include <memory>" b
#include <memory>
endsnippet

snippet utility "#include <utility>" b
#include <utility>
endsnippet

snippet functional "#include <functional>" b
#include <functional>
endsnippet

snippet tuple "#include <tuple>" b
#include <tuple>
endsnippet

snippet map "#include <map>" b
#include <map>
endsnippet

snippet vector "#include <vector>" b
#include <vector>
endsnippet

snippet string "#include <string>" b
#include <string>
endsnippet

snippet numeric "#include <numeric>" b
#include <numeric>
endsnippet

snippet condition_variable "#include <condition_variable>" b
#include <condition_variable>
endsnippet

snippet chrono "#include <chrono>" b
#include <chrono>
endsnippet

snippet ustd "using namespace std" b
using namespace std;
endsnippet

snippet size_of_array "size_of_array function" b
template<typename T, size_t N>
constexpr size_t size_of_array(T (&)[N]) {
	return N;
}
endsnippet

snippet cls "class definition" b
class $1`!p
add_str_if(snip, t[2], " : ")
refresh(snip)
`$2 {
	${0:;}
};
endsnippet

snippet tpl "template definition" w
template<$1>$0
endsnippet

snippet namespace "namespace definition" b
namespace $1 {$0
}
endsnippet

snippet dynamic_cast "dynamic_cast" w
dynamic_cast<$1>($2)
endsnippet

snippet override "override" w
override $0
endsnippet

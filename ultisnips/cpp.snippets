extends c
priority 1

global !p
from ultisnips_helpers import *
endglobal

snippet iostream "#include <iostream>" b
#include <iostream>
endsnippet

snippet sstream "#include <sstream>" b
#include <sstream>
endsnippet

snippet fstream "#include <fstream>" b
#include <fstream>
endsnippet

snippet thread "#include <thread>" b
#include <thread>
endsnippet

snippet future "#include <future>" b
#include <future>
endsnippet

snippet atomic "#include <atomic>" b
#include <atomic>
endsnippet

snippet array "#include <array>" b
#include <array>
endsnippet

snippet mutex "#include <mutex>" b
#include <mutex>
endsnippet

snippet memory "#include <memory>" b
#include <memory>
endsnippet

snippet utility "#include <utility>" b
#include <utility>
endsnippet

snippet exception "#include <exception>" b
#include <exception>
endsnippet

snippet functional "#include <functional>" b
#include <functional>
endsnippet

snippet algorithm "#include <algorithm>" b
#include <algorithm>
endsnippet

snippet tuple "#include <tuple>" b
#include <tuple>
endsnippet

snippet map "#include <map>" b
#include <map>
endsnippet

snippet unordered_map "#include <unordered_map>" b
#include <unordered_map>
endsnippet

snippet new "#include <new>" b
#include <new>
endsnippet

snippet vector "#include <vector>" b
#include <vector>
endsnippet

snippet string "#include <string>" b
#include <string>
endsnippet

snippet cstring "#include <cstring>" b
#include <cstring>
endsnippet

snippet cstdlib "#include <cstdlib>" b
#include <cstdlib>
endsnippet

snippet numeric "#include <numeric>" b
#include <numeric>
endsnippet

snippet cassert "#include <cassert>" b
#include <cassert>
endsnippet

snippet condition_variable "#include <condition_variable>" b
#include <condition_variable>
endsnippet

snippet chrono "#include <chrono>" b
#include <chrono>
endsnippet

snippet boost_string "#include <boost/algorithm/string.hpp>" b
#include <boost/algorithm/string.hpp>
endsnippet

snippet ustd "using namespace std" b
using namespace std;
endsnippet

snippet size_t "size_t" w
size_t $0
endsnippet

snippet size_of_array "size_of_array function" b
template<typename T, size_t N>
constexpr size_t size_of_array(T (&)[N]) {
	return N;
}
endsnippet

snippet for "for loop" b
for ($1) {
	${0:;}
}
endsnippet

snippet try "try block" b
try {
	${0:;}
}
endsnippet

priority 2
snippet &e "const xxx &e" i
const ${1:std::exception} &e
endsnippet

priority 1

snippet catch "catch block" w
catch ($1) {
	${0:;}
}
endsnippet

priority 2
snippet }catch "} catch block" w
} catch ($1) {
	${0:;}
endsnippet

priority 1

snippet cls "class definition" b
class $1`!p
add_str_if(snip, t[2], " : ")
refresh(snip)
`$2
{
public:
	$1();
	virtual ~$1();$0

private:

};
endsnippet

snippet struct "struct definition" b
struct $1`!p
add_str_if(snip, t[2], " : ")
refresh(snip)
`$2
{
public:
	${0:;}

private:

};
endsnippet

# no need to define defs, just use def
#snippet defs "member function definition" b
#$1`!p
#add_str_if(snip, t[1], " ")
#refresh(snip)
#`$2`!p
#add_str_if(snip, t[2], "::")
#refresh(snip)
#`$3($4)
#{
#	${0:;}
#}
#endsnippet

snippet cto "constructor" w
$1($2);
endsnippet

snippet dto "destructor" w
~$1();
endsnippet

snippet ctor "constructor definition" w
$1`!p
add_str_if(snip, t[1], "::")
refresh(snip)
`$2::$2($3)`!p
indent = get_indent(snip, shift=1)
prefix = ' :\n' + indent
add_str_if(snip, t[4], prefix)
`$4
{
	${0:;}
}
endsnippet

snippet dtor "destructor definition" b
$1`!p
add_str_if(snip, t[1], "::")
refresh(snip)
`$2::~$2()
{
	${0:;}
}
endsnippet

snippet what "std::exception::what" b
const char *what() const noexcept;
endsnippet

snippet init "common init function for ctor" b
void init($1);
endsnippet

snippet c "const" w
const $0
endsnippet

snippet a "auto" w
auto $0
endsnippet

snippet v "virtual" w
virtual $0
endsnippet

snippet e "explicit" w
explicit $0
endsnippet

snippet m "mutable" w
mutable $0
endsnippet

snippet f "friend" w
friend $0
endsnippet

snippet s "std::" w
std::
endsnippet

snippet u "using" w
using $0
endsnippet

snippet un "using namespace" b
using namespace $0
endsnippet

snippet tpl "template definition" w
template<$1>$0
endsnippet

snippet uns "using namespace" b
using namespace $1;
endsnippet

snippet ns "namespace definition" b
namespace`!p
add_str_if(snip, t[1], " ")
refresh(snip)
`$1 {
	$0

} // namespace $1
endsnippet

snippet op "operator" w
operator $0
endsnippet

snippet up "unique_ptr" w
std::unique_ptr<$1>
endsnippet

snippet sp "shared_ptr" w
std::shared_ptr<$1>
endsnippet

snippet os "ostringstream" w
std::ostringstream $0
endsnippet

snippet st "string" w
std::string $0
endsnippet

snippet ts "to_string()" w
std::to_string($1)
endsnippet

snippet tu "tuple<>" w
std::tuple<$1> $0
endsnippet

snippet ve "vector<>" w
std::vector<$1> $0
endsnippet

snippet um "unordered_map<>" w
std::unordered_map<$1> $0
endsnippet

snippet mtu "make_tuple()" w
std::make_tuple($1)
endsnippet

snippet tie "tie()" w
std::tie($1)
endsnippet

snippet dynamic_cast "dynamic_cast" w
dynamic_cast<$1>($2)
endsnippet

snippet static_cast "static_cast" w
static_cast<$1>($2)
endsnippet

snippet override "override" w
override $0
endsnippet

snippet << "cout << ... << endl;" b
std::cout << "$1"`!p
add_str_if(snip, t[2], " << ")
refresh(snip)
`$2 << std::endl;
endsnippet

snippet cerr "cerr << ... << endl;" b
std::cerr << "$1"`!p
add_str_if(snip, t[2], " << ")
refresh(snip)
`$2 << std::endl;
endsnippet



